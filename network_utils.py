from netmiko import ConnectHandler
import os
from dotenv import load_dotenv
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def format_connection_error(error_message):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    """
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    error_translations = {
        "TCP connection to device failed": "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º",
        "Authentication failed": "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "Timeout": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    }

    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫
    error_reasons = {
        "Incorrect hostname or IP address": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞ –∏–ª–∏ IP-–∞–¥—Ä–µ—Å",
        "Wrong TCP port": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TCP-–ø–æ—Ä—Ç",
        "Intermediate firewall blocking access": "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–æ–º",
        "Authentication failed": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    }

    # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    main_error = None
    for key, translation in error_translations.items():
        if key in error_message:
            main_error = translation
            break

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫
    detailed_reasons = []
    for key, reason in error_reasons.items():
        if key in error_message:
            detailed_reasons.append(reason)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_match = re.search(r'Device settings: (\w+) ([\d.]+):(\d+)', error_message)
    device_info = None
    if device_match:
        device_type, ip, port = device_match.groups()
        device_info = f"–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type}, IP: {ip}, –ü–æ—Ä—Ç: {port}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = []
    if main_error:
        formatted_message.append(f"üö® {main_error}")
    
    if detailed_reasons:
        formatted_message.append("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        for reason in detailed_reasons:
            formatted_message.append(f"‚Ä¢ {reason}")
    
    if device_info:
        formatted_message.append(f"\n{device_info}")

    return {
        "status": "error", 
        "message": "\n".join(formatted_message)
    }

def execute_switch_command(ip_address, command):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env
        device = {
            'device_type': os.getenv('SWITCH_DEVICE_TYPE', 'cisco_ios'),
            'host': ip_address,
            'username': os.getenv('SWITCH_USERNAME'),
            'password': os.getenv('SWITCH_PASSWORD'),
            'port': int(os.getenv('SWITCH_PORT', 22)),
            'timeout': int(os.getenv('SWITCH_TIMEOUT', 10))
        }
        
        with ConnectHandler(**device) as connection:
            output = connection.send_command(command)
            return {"status": "success", "output": output}
    except Exception as e:
        return format_connection_error(str(e))

def test_switch_connection(ip_address):
    """
    –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä—É
    """
    try:
        device = {
            'device_type': os.getenv('SWITCH_DEVICE_TYPE', 'cisco_ios'),
            'host': ip_address,
            'username': os.getenv('SWITCH_USERNAME'),
            'password': os.getenv('SWITCH_PASSWORD'),
            'port': int(os.getenv('SWITCH_PORT', 22)),
            'timeout': int(os.getenv('SWITCH_TIMEOUT', 10))
        }
        
        with ConnectHandler(**device) as connection:
            return {"status": "success", "message": "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"}
    except Exception as e:
        return format_connection_error(str(e))
