import { loadUsers, createUser, updateUser } from './services/users.js';
import { loadSwitches, createSwitch, updateSwitch } from './services/switches.js';
import { loadCommands, createCommand, updateCommand } from './services/commands.js';
import { getToken } from './utils/auth.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
function collectFormData(form) {
    console.log('üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã:', form.id);
    const rawData = {};
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã
    form.querySelectorAll('input').forEach(input => {
        console.log(`–≠–ª–µ–º–µ–Ω—Ç: ${input.id}, –¢–∏–ø: ${input.type}, –ó–Ω–∞—á–µ–Ω–∏–µ: ${input.value}`);
        
        if (input.type === 'hidden') {
            rawData[input.id.replace('Edit', '')] = input.value;
        } else if (input.type === 'text') {
            rawData[input.id.replace('Input', '')] = input.value;
        } else if (input.type === 'password') {
            if (input.value) {
                rawData[input.id.replace('Input', '')] = input.value;
            }
        } else if (input.type === 'checkbox') {
            rawData[input.id.replace('Check', '')] = input.checked;
        }
    });

    // –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º
    const keyMappings = {
        'switch': {
            'switchId': 'id',
            'switchIp': 'ip_address',
            'switchHostname': 'hostname',
            'switchBrand': 'brand'
        },
        'user': {
            'userId': 'id',
            'username': 'username',
            'password': 'password',
            'isAdmin': 'is_admin'
        },
        'command': {
            'commandId': 'id',
            'commandName': 'name',
            'commandTemplate': 'template'
        }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã
    let formType = '';
    if (form.id.includes('switchForm')) formType = 'switch';
    else if (form.id.includes('userForm')) formType = 'user';
    else if (form.id.includes('commandForm')) formType = 'command';

    console.log('–¢–∏–ø —Ñ–æ—Ä–º—ã:', formType);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏
    const mappedData = {};
    const mapping = keyMappings[formType] || {};
    
    Object.keys(rawData).forEach(key => {
        const mappedKey = mapping[key] || key;
        mappedData[mappedKey] = rawData[key];
        console.log(`–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${key} -> ${mappedKey}, –ó–Ω–∞—á–µ–Ω–∏–µ: ${rawData[key]}`);
    });

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ (—Å–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    if (formType === 'command') {
        const variables = {};
        document.querySelectorAll('#variablesContainer .input-group').forEach(group => {
            const nameInput = group.querySelector('.variable-name');
            const valueInput = group.querySelector('.variable-value');
            
            if (nameInput.value && valueInput.value) {
                variables[nameInput.value] = valueInput.value;
            }
        });
        mappedData.variables = Object.keys(variables).length ? variables : null;
    }

    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', mappedData);
    return mappedData;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');
    
    try {
        getToken(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        loadUsers();
        loadSwitches();
        loadCommands();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
        const forms = [
            { 
                selector: '#userForm', 
                createFunc: createUser, 
                updateFunc: updateUser,
                loadFunc: loadUsers,
                name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
            },
            { 
                selector: '#switchForm', 
                createFunc: createSwitch, 
                updateFunc: updateSwitch,
                loadFunc: loadSwitches,
                name: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã'
            },
            { 
                selector: '#commandForm', 
                createFunc: createCommand, 
                updateFunc: updateCommand,
                loadFunc: loadCommands,
                name: '–ö–æ–º–∞–Ω–¥—ã'
            }
        ];

        forms.forEach(formConfig => {
            const form = document.querySelector(formConfig.selector);
            if (form) {
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    console.log(`üñäÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã: ${formConfig.name}`);

                    try {
                        const formData = collectFormData(form);
                        const idInput = form.querySelector('[id$="IdEdit"]');
                        const id = idInput ? idInput.value : null;

                        console.log(`üÜî ID: ${id}`);
                        console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', formData);

                        if (id) {
                            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${formConfig.name}`);
                            await formConfig.updateFunc(id, formData);
                        } else {
                            console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ ${formConfig.name}`);
                            await formConfig.createFunc(formData);
                        }

                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        const modalElement = form.closest('.modal');
                        if (modalElement) {
                            bootstrap.Modal.getInstance(modalElement).hide();
                        }

                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        formConfig.loadFunc();
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ${formConfig.name}:`, error);
                        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
                    }
                });
            } else {
                console.error(`‚ùå –§–æ—Ä–º–∞ ${formConfig.selector} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});
