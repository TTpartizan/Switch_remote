import { loadUsers, createUser, updateUser } from './services/users.js';
import { loadSwitches, createSwitch, updateSwitch } from './services/switches.js';
import { loadCommands, createCommand, updateCommand } from './services/commands.js';
import { getToken } from './utils/auth.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
function safeGetElement(selector, context = document) {
    const element = context.querySelector(selector);
    if (!element) {
        console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', 
            Array.from(document.querySelectorAll('*'))
                .filter(el => el.id || el.className)
                .map(el => ({
                    id: el.id, 
                    classes: el.className
                }))
        );
    }
    return element;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');
    
    try {
        getToken(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        loadUsers();
        loadSwitches();
        loadCommands();

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addButtons = [
            { 
                id: 'addUserBtn', 
                modalId: 'userEditModal',
                resetFields: (form) => {
                    console.log('üîç –°–±—Ä–æ—Å –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    const idEdit = form.querySelector('#userIdEdit');
                    const usernameInput = form.querySelector('#usernameInput');
                    const passwordInput = form.querySelector('#passwordInput');
                    const isAdminCheck = form.querySelector('#isAdminCheck');

                    if (idEdit) idEdit.value = '';
                    if (usernameInput) usernameInput.value = '';
                    if (passwordInput) passwordInput.value = '';
                    if (isAdminCheck) isAdminCheck.checked = false;

                    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
                        idEdit: !!idEdit,
                        usernameInput: !!usernameInput,
                        passwordInput: !!passwordInput,
                        isAdminCheck: !!isAdminCheck
                    });
                }
            },
            { 
                id: 'addSwitchBtn', 
                modalId: 'switchEditModal',
                resetFields: (form) => {
                    console.log('üîç –°–±—Ä–æ—Å –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞');
                    const idEdit = form.querySelector('#switchIdEdit');
                    const ipInput = form.querySelector('#switchIpInput');
                    const hostnameInput = form.querySelector('#switchHostnameInput');
                    const brandInput = form.querySelector('#switchBrandInput');

                    if (idEdit) idEdit.value = '';
                    if (ipInput) ipInput.value = '';
                    if (hostnameInput) hostnameInput.value = '';
                    if (brandInput) brandInput.value = 'cisco_ios';

                    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
                        idEdit: !!idEdit,
                        ipInput: !!ipInput,
                        hostnameInput: !!hostnameInput,
                        brandInput: !!brandInput
                    });
                }
            }
        ];

        // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        addButtons.forEach(config => {
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏
            const button = document.getElementById(config.id);
            const modal = document.getElementById(config.modalId);
            const form = modal ? modal.querySelector('form') : null;

            if (button && modal && form) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ${config.id}`);
                button.addEventListener('click', () => {
                    console.log(`üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${config.id}`);
                    
                    // –°–±—Ä–æ—Å –ø–æ–ª–µ–π
                    config.resetFields(form);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    new bootstrap.Modal(modal).show();
                });
            } else {
                console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è ${config.id}:`, {
                    button: !!button,
                    modal: !!modal,
                    form: !!form
                });
            }
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});
